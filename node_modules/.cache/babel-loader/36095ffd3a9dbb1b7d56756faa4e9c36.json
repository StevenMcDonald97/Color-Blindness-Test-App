{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/Steven/CS-Projects/Color-Blindness-Test-App/src/pages/TestCB.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport \"../components/styles.css\";\nimport testCardsOriginal from \"data/testCardsCB\";\nimport TestCard from \"../components/TestCard\";\nimport OutlinedInput from \"@material-ui/core/OutlinedInput\";\n\nconst TestCB = () => {\n  _s();\n\n  const [randomIndexCB, setRandomIndexCB] = useState(0);\n  const [answer, setAnswer] = useState(\"\");\n  const [score, setScore] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n  const [testCards, setTestCards] = useState([...testCardsOriginal]);\n  const styles = {\n    input: {\n      height: 40,\n      width: 200,\n      margin: 10\n    }\n  };\n\n  const handleKeyDown = e => {\n    if (e.key === \"Enter\" && answer !== \"\") {\n      checkAnswer();\n    }\n  };\n\n  const unSureAnswer = () => {\n    setScore(score + 0);\n    nextTestCard();\n    setAnswer(\"\");\n  };\n\n  const checkAnswer = () => {\n    if (answer !== \"\" && answer === testCards[randomIndexCB].answer) {\n      setScore(score + 1);\n    } else {\n      setScore(score + 0);\n    }\n\n    nextTestCard();\n    setAnswer(\"\");\n  };\n\n  const nextTestCard = () => {\n    let currentCardArray = testCards;\n\n    if (currentCardArray.length > 1) {\n      currentCardArray.splice(randomIndexCB, 1);\n      setTestCards(currentCardArray);\n      setRandomIndexCB(Math.floor(Math.random() * testCards.length));\n    } else {\n      setShowScore(true);\n      setTestCards([...testCardsOriginal]);\n    }\n  };\n\n  const resetTest = () => {\n    setScore(0);\n    setShowScore(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content-section\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content-wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"section-header\",\n          children: \"Color Blind Test\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this), showScore === false ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"test-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"section-description\",\n            children: \"Look at the number inside the picture and enter the correct answer in the box below.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TestCard, {\n            imgSrc: testCards[randomIndexCB].imgSrc,\n            alt: testCards[randomIndexCB].alt\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-container flex\",\n            children: [/*#__PURE__*/_jsxDEV(OutlinedInput, {\n              style: styles.input,\n              type: \"number\",\n              placeholder: \"Enter your answer here\",\n              value: answer,\n              onKeyPress: e => {\n                handleKeyDown(e);\n              },\n              onChange: e => {\n                setAnswer(e.target.value);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"button\",\n              onClick: () => {\n                unSureAnswer();\n              },\n              children: \"Not Sure\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"button\",\n              onClick: () => {\n                checkAnswer();\n              },\n              children: \"Submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"score-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"score\",\n            children: [\"Your score is \", score, \"/\", testCards.length, \".\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"button\",\n            onClick: () => {\n              resetTest();\n            },\n            children: \"Close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TestCB, \"eJ4tsLeqb0QQlgP61Fw0fQPTFNU=\");\n\n_c = TestCB;\nexport default TestCB;\n\nvar _c;\n\n$RefreshReg$(_c, \"TestCB\");","map":{"version":3,"sources":["/Users/Steven/CS-Projects/Color-Blindness-Test-App/src/pages/TestCB.js"],"names":["React","useState","testCardsOriginal","TestCard","OutlinedInput","TestCB","randomIndexCB","setRandomIndexCB","answer","setAnswer","score","setScore","showScore","setShowScore","testCards","setTestCards","styles","input","height","width","margin","handleKeyDown","e","key","checkAnswer","unSureAnswer","nextTestCard","currentCardArray","length","splice","Math","floor","random","resetTest","imgSrc","alt","target","value"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport \"../components/styles.css\";\n\nimport testCardsOriginal from \"data/testCardsCB\";\nimport TestCard from \"../components/TestCard\";\n\nimport OutlinedInput from \"@material-ui/core/OutlinedInput\";\n\n\nconst TestCB = () => {\n  const [randomIndexCB, setRandomIndexCB] = useState(0);\n  const [answer, setAnswer] = useState(\"\");\n  const [score, setScore] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n  const [testCards, setTestCards] = useState([...testCardsOriginal]);\n\n  const styles = {\n    input: {\n      height: 40,\n      width: 200,\n      margin: 10\n    }\n  }\n\n  const handleKeyDown = (e) => {\n    if (e.key === \"Enter\" && answer !== \"\") {\n      checkAnswer();\n    }\n  }\n\n  const unSureAnswer = () => {\n    setScore(score + 0);\n    nextTestCard();\n    setAnswer(\"\");\n  }\n\n  const checkAnswer = () => {\n    if (answer !== \"\" && answer === testCards[randomIndexCB].answer) {\n      setScore(score + 1);\n    } else {\n      setScore(score + 0);\n    }\n    nextTestCard();\n    setAnswer(\"\");\n  }\n\n  const nextTestCard = () => {\n    let currentCardArray = testCards;\n    if (currentCardArray.length > 1) {\n      currentCardArray.splice(randomIndexCB, 1);\n      setTestCards(currentCardArray);\n      setRandomIndexCB(Math.floor(Math.random() * testCards.length));\n    } else {\n      setShowScore(true);\n      setTestCards([...testCardsOriginal]);\n    }\n  }\n\n  const resetTest = () => {\n    setScore(0);\n    setShowScore(false);\n  }\n\n  return (\n    <div className=\"main\">\n      <div className=\"content-section\">\n        <div className=\"content-wrapper\">\n          <div className=\"section-header\">Color Blind Test</div>\n\n          {showScore === false ? (\n            <div className=\"test-content\">\n              <div className=\"section-description\">\n                Look at the number inside the picture and enter the correct\n                answer in the box below.\n              </div>\n              <TestCard\n                imgSrc={testCards[randomIndexCB].imgSrc}\n                alt={testCards[randomIndexCB].alt}\n              />\n              <div className=\"input-container flex\">\n                <OutlinedInput\n                  style={styles.input}\n                  type=\"number\"\n                  placeholder=\"Enter your answer here\"\n                  value={answer}\n                  onKeyPress={(e) => {\n                    handleKeyDown(e);\n                  }}\n                  onChange={(e) => {\n                    setAnswer(e.target.value);\n                  }}\n                />\n                                <div\n                  className=\"button\"\n                  onClick={() => {\n                    unSureAnswer();\n                  }}\n                >\n                  Not Sure\n                </div>\n                <div\n                  className=\"button\"\n                  onClick={() => {\n                    checkAnswer();\n                  }}\n                >\n                  Submit\n                </div>\n              </div>\n            </div>\n          ) : (\n            <div className=\"score-container\">\n              <div className=\"score\">Your score is {score}/{testCards.length}.</div>\n              <div\n                className=\"button\"\n                onClick={() => {\n                  resetTest();\n                }}\n              >\n                Close\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TestCB;\n"]},"metadata":{},"sourceType":"module"}